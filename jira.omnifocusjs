/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Bastian Kuhn",
  "identifier": "de.bastian-kuhn.omnifocus.sync.jira",
  "version": "1.0",
  "description": "Sync elements from Jira with Omnifocus",
  "label": "x Jira: Sync",
  "shortLabel": "Jira: sync"
}*/
(() => {
  var action = new PlugIn.Action(function (selection, sender) {
    console.clear();

    // START EDIT
    var user = "username or email";
    var password = "password or token";
    var jiraUrl = "https://example.atlassian.net";
    var jiraProjectId = "PROJ";
    var omnifocusTagToUse = "Jira";
    // END EDIT

    var tag =
      tags.byName(omnifocusTagToUse) ||
      flattenedTags.byName(omnifocusTagToUse) ||
      new Tag(omnifocusTagToUse);
    var tasks = tag.tasks;

    var url_params =
      "/rest/api/2/search?jql=assignee=currentuser()%20and%20resolution%20is%20empty";
    var url = jiraUrl + url_params;

    var data = Data.fromString(user + ":" + password);
    var credentials = data.toBase64();

    var request = URL.FetchRequest.fromString(url);
    request.method = "GET";
    request.headers = { Authorization: `Basic ${credentials}` };
    var requestPromise = request.fetch();

    // cache object instead of array so search will be faster later
    let omnifocusTasks = {};
    tasks.forEach((task) => {
      if (task.name.startsWith(jiraProjectId)) {
        const re = new RegExp(`${jiraProjectId}-[^ ]+`);
        let taskId;
        try {
          taskId = task.name.match(re)[0];
        } catch {
          return;
        }
        if (!taskId) return;
        omnifocusTasks[taskId] = task;
      }
    });

    requestPromise.then((response) => {
      if (response.mimeType == "application/json") {
        var json_response = JSON.parse(response.bodyString);
        // ADD THE TASKS

        for (const issue of json_response.issues) {
          // Search if we need to add a new Task
          if (omnifocusTasks[issue.key]) {
            // Make sure the task opens again
            omnifocusTasks[issue.key].markIncomplete();
            omnifocusTasks[issue.key].jiraToOmnifocusMatched = true;
            continue;
          }

          // There was no Matching Task, so we create the Task
          const taskName = issue.key + " " + issue.fields.summary;
          const newTask = new Task(taskName, inbox.beginning);
          newTask.note =
            issue.self + "\n" + (issue.fields.description || "No description");
          newTask.addTag(tag);
        }

        //Close Tasks
        Object.values(omnifocusTasks).forEach((task) => {
          if (!task.jiraToOmnifocusMatched) task.markComplete();
        });
      }
    });

    requestPromise.catch((err) => {
      console.log(`DEBUG: catch error ${err}`);
    });
  });

  action.validate = function (selection, sender) {
    //
    // This action is always valid.
    //
    return true;
  };

  return action;
})();
